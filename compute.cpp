#include <iostream>
#include <vector>
#include <cmath>
#include <fstream>
#include <utility>
#include <iomanip>

#include "constants.h"

struct State {
    double y1, y2, y3;
};


typedef std::pair<double, State> TimeStatePair;
typedef std::vector<TimeStatePair> TimeSeries;

State compute_begining_values(State& vector_y_star){
    State vector_y_0;
    vector_y_0.y1 = vector_y_star.y1 + EPS;
    vector_y_0.y2 = vector_y_star.y2 + EPS;
    vector_y_0.y3 = vector_y_star.y3 + EPS;
    return vector_y_0;
}

State compute_stationary_solutions(){
    State y_star;
    y_star.y2 = sqrt(D*M + sqrt(D*D*M*M -4*M*M*M + 3*M*M));
    y_star.y1 = -M/y_star.y2;
    y_star.y3 = D/2 + M/(y_star.y2*y_star.y2)*(1-M);
    return y_star;
}

// –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
State func(double t, State y) {
    State dy;
    dy.y1 = y.y1 - (D / 2.0) * y.y2 + y.y2 * (y.y3 + y.y1 * y.y1);
    dy.y2 = (D / 2.0) * y.y1 + y.y2 + y.y1 * (3 * y.y3 - y.y1 * y.y1);
    dy.y3 = -2.0 * y.y3 * (M + y.y1 * y.y2);
    return dy;
}

TimeSeries runge_kutta_4_system(){
    State vector_y_star = compute_stationary_solutions();
    State vector_y_0 = compute_begining_values(vector_y_star);
    double t = T0;
    State y = vector_y_0;
    TimeSeries results;
    while (t <= TN+EPS) {
        results.push_back({t, y});

        State k1 = func(t, y);
        State k2 = func(t + STEP/2, { y.y1 + STEP/2 * k1.y1, y.y2 + STEP/2 * k1.y2, y.y3 + STEP/2 * k1.y3 });
        State k3 = func(t + STEP/2, { y.y1 + STEP/2 * k2.y1, y.y2 + STEP/2 * k2.y2, y.y3 + STEP/2 * k2.y3 });
        State k4 = func(t + STEP,   { y.y1 + STEP * k3.y1,  y.y2 + STEP * k3.y2,  y.y3 + STEP * k3.y3  });

        y.y1 += STEP/6 * (k1.y1 + 2*k2.y1 + 2*k3.y1 + k4.y1);
        y.y2 += STEP/6 * (k1.y2 + 2*k2.y2 + 2*k3.y2 + k4.y2);
        y.y3 += STEP/6 * (k1.y3 + 2*k2.y3 + 2*k3.y3 + k4.y3);

        t += STEP;
    }
    return results;
}

void writeToCSV(const TimeSeries& data, const std::string& filename,int traj_id = -1) {
    std::ofstream file(filename, std::ios::app); // üëà —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    if (!file.is_open()) {
        std::cerr << "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ " << filename << "\n";
        return;
    }
    // –ú–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –∏–Ω–¥–µ–∫—Å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
    // if (traj_id >= 0)
    //     file << "# Trajectory " << traj_id << "\n";


    for (const auto& pair : data) {
        double time = pair.first;
        const State& state = pair.second;
        // file << std::fixed << std::setprecision(6)
        file << time << "," << state.y1 << "," << state.y2 << "," << state.y3 << "\n";
    }
    // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π
    // file << "\n";

    file.close();
    // // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º –≤ TimeSeries –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ö –≤ —Ñ–∞–π–ª
    // for (const auto& pair : data) {
    //     double time = pair.first;
    //     const State& state = pair.second;
        
    //     // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∏ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ
    //     file << time << "," << state.y1 << "," << state.y2 << "," << state.y3 << "\n";
    // }
}


int main(){
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
    std::string filename = "data.csv";
    // üí° –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    static bool first_time = true;
    if (first_time) {
        std::ofstream header_file(filename, std::ios::app); // –±–µ–∑ app: –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
        if (header_file.tellp() == 0) {
            header_file << "Time,y1,y2,y3\n";
        }
        header_file.close();
        first_time = false;
    }
    // // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
    // std::ofstream file("data.csv");
    // if (!file.is_open()) {
    //     std::cerr << "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞!" << std::endl;
    //     return 1;
    // }    
    // // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ CSV
    // file << "Time,y1,y2,y3\n";


    TimeSeries vector_y = runge_kutta_4_system();
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª "output.csv"
    writeToCSV(vector_y, filename,NUM_TRAJECTORY);

    std::cout << "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª data.csv\n" << std::endl;
    // // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
    // file.close();
    return 0;
}